{
  "Next.js Page": {
    "prefix": "npage",
    "body": [
      "import type { Metadata } from 'next'",
      "",
      "export const metadata: Metadata = {",
      "  title: '$1',",
      "  description: '$2',",
      "}",
      "",
      "export default function ${3:Page}() {",
      "  return (",
      "    <div>",
      "      <h1>$4</h1>",
      "      $0",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a new Next.js page with metadata"
  },
  "Next.js Server Component": {
    "prefix": "nsc",
    "body": [
      "import React from 'react'",
      "",
      "export default async function ${1:ServerComponent}() {",
      "  $0",
      "  return (",
      "    <div>",
      "      $2",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a Next.js Server Component"
  },
  "Next.js Client Component": {
    "prefix": "ncc",
    "body": [
      "'use client'",
      "",
      "import React from 'react'",
      "",
      "export default function ${1:ClientComponent}() {",
      "  $0",
      "  return (",
      "    <div>",
      "      $2",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a Next.js Client Component"
  },
  "Drizzle CRUD Operations": {
    "prefix": "dzcrud",
    "body": [
      "import { db } from '@/db'",
      "import { ${1:table} } from '@/db/schema'",
      "import { eq } from 'drizzle-orm'",
      "",
      "// Create",
      "export async function create${2:Entity}(data: typeof ${1:table}.$inferInsert) {",
      "  return await db.insert(${1:table}).values(data).returning()",
      "}",
      "",
      "// Read all",
      "export async function getAll${2:Entity}s() {",
      "  return await db.select().from(${1:table})",
      "}",
      "",
      "// Read by ID",
      "export async function get${2:Entity}ById(id: string) {",
      "  return await db.select().from(${1:table}).where(eq(${1:table}.id, id)).limit(1)",
      "}",
      "",
      "// Update",
      "export async function update${2:Entity}(id: string, data: Partial<typeof ${1:table}.$inferInsert>) {",
      "  return await db.update(${1:table}).set(data).where(eq(${1:table}.id, id)).returning()",
      "}",
      "",
      "// Delete",
      "export async function delete${2:Entity}(id: string) {",
      "  return await db.delete(${1:table}).where(eq(${1:table}.id, id)).returning()",
      "}",
      ""
    ],
    "description": "Creates Drizzle CRUD operations for a table"
  },
  "Drizzle Schema Table": {
    "prefix": "dztable",
    "body": [
      "import { pgTable, serial, varchar, timestamp, boolean, text, integer } from 'drizzle-orm/pg-core'",
      "import { createInsertSchema, createSelectSchema } from 'drizzle-zod'",
      "import { z } from 'zod'",
      "",
      "export const ${1:tableName} = pgTable('${2:tableName}', {",
      "  id: serial('id').primaryKey(),",
      "  name: varchar('name', { length: 255 }).notNull(),",
      "  description: text('description'),",
      "  ${3:otherField}: ${4:fieldType}('${3:otherField}')$5,",
      "  createdAt: timestamp('created_at').defaultNow().notNull(),",
      "  updatedAt: timestamp('updated_at').defaultNow().notNull(),",
      "})",
      "",
      "// Zod schemas for validation",
      "export const insert${6:Entity}Schema = createInsertSchema(${1:tableName})",
      "export const select${6:Entity}Schema = createSelectSchema(${1:tableName})",
      "",
      "// TypeScript types",
      "export type ${6:Entity} = z.infer<typeof select${6:Entity}Schema>",
      "export type New${6:Entity} = z.infer<typeof insert${6:Entity}Schema>",
      ""
    ],
    "description": "Creates a Drizzle schema table with Zod validation"
  },
  "Next.js API Route": {
    "prefix": "napi",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server'",
      "",
      "export async function GET(request: NextRequest) {",
      "  try {",
      "    // Handle GET request",
      "    $0",
      "    return NextResponse.json({ message: 'Success' })",
      "  } catch (error) {",
      "    console.error('Error:', error)",
      "    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })",
      "  }",
      "}",
      "",
      "export async function POST(request: NextRequest) {",
      "  try {",
      "    const body = await request.json()",
      "    // Handle POST request",
      "    return NextResponse.json({ message: 'Success' })",
      "  } catch (error) {",
      "    console.error('Error:', error)",
      "    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a Next.js API route handler"
  }
}
